-- ***************************
-- 0) Drop All Existing Objects
-- ***************************

-- Drop Views
BEGIN EXECUTE IMMEDIATE 'DROP VIEW PLANT_INFO'; 
EXCEPTION WHEN OTHERS THEN IF SQLCODE != -942 THEN RAISE; END IF; END;
/
BEGIN EXECUTE IMMEDIATE 'DROP VIEW STAFF_ASSIGNMENT_SUMMARY_VW'; 
EXCEPTION WHEN OTHERS THEN IF SQLCODE != -942 THEN RAISE; END IF; END;
/
BEGIN EXECUTE IMMEDIATE 'DROP VIEW PLANT_LOCATIONS_VW'; 
EXCEPTION WHEN OTHERS THEN IF SQLCODE != -942 THEN RAISE; END IF; END;
/

-- Drop Tables
BEGIN EXECUTE IMMEDIATE 'DROP TABLE INVENTORY CASCADE CONSTRAINTS'; 
EXCEPTION WHEN OTHERS THEN IF SQLCODE != -942 THEN RAISE; END IF; END;
/
BEGIN EXECUTE IMMEDIATE 'DROP TABLE ASSIGNMENT CASCADE CONSTRAINTS'; 
EXCEPTION WHEN OTHERS THEN IF SQLCODE != -942 THEN RAISE; END IF; END;
/
BEGIN EXECUTE IMMEDIATE 'DROP TABLE PLANT CASCADE CONSTRAINTS'; 
EXCEPTION WHEN OTHERS THEN IF SQLCODE != -942 THEN RAISE; END IF; END;
/
BEGIN EXECUTE IMMEDIATE 'DROP TABLE EXPERIMENT CASCADE CONSTRAINTS'; 
EXCEPTION WHEN OTHERS THEN IF SQLCODE != -942 THEN RAISE; END IF; END;
/
BEGIN EXECUTE IMMEDIATE 'DROP TABLE STAFF CASCADE CONSTRAINTS'; 
EXCEPTION WHEN OTHERS THEN IF SQLCODE != -942 THEN RAISE; END IF; END;
/
BEGIN EXECUTE IMMEDIATE 'DROP TABLE SPACE CASCADE CONSTRAINTS'; 
EXCEPTION WHEN OTHERS THEN IF SQLCODE != -942 THEN RAISE; END IF; END;
/

-- Drop Sequences
BEGIN EXECUTE IMMEDIATE 'DROP SEQUENCE SPACE_SEQ'; 
EXCEPTION WHEN OTHERS THEN IF SQLCODE != -2289 THEN RAISE; END IF; END;
/
BEGIN EXECUTE IMMEDIATE 'DROP SEQUENCE STAFF_SEQ'; 
EXCEPTION WHEN OTHERS THEN IF SQLCODE != -2289 THEN RAISE; END IF; END;
/
BEGIN EXECUTE IMMEDIATE 'DROP SEQUENCE EXPERIMENT_SEQ'; 
EXCEPTION WHEN OTHERS THEN IF SQLCODE != -2289 THEN RAISE; END IF; END;
/
BEGIN EXECUTE IMMEDIATE 'DROP SEQUENCE PLANT_SEQ'; 
EXCEPTION WHEN OTHERS THEN IF SQLCODE != -2289 THEN RAISE; END IF; END;
/
BEGIN EXECUTE IMMEDIATE 'DROP SEQUENCE ASSIGNMENT_SEQ'; 
EXCEPTION WHEN OTHERS THEN IF SQLCODE != -2289 THEN RAISE; END IF; END;
/
BEGIN EXECUTE IMMEDIATE 'DROP SEQUENCE INVENTORY_SEQ'; 
EXCEPTION WHEN OTHERS THEN IF SQLCODE != -2289 THEN RAISE; END IF; END;
/


-- ***************************
-- 1) Create Tables
-- ***************************

CREATE TABLE SPACE (
    SPACE_ID       NUMBER(10) PRIMARY KEY,
    LOCATION_DESC  VARCHAR2(100) NOT NULL,
    CAPACITY       NUMBER(5) NOT NULL,
    SPACE_TYPE     VARCHAR2(50) NOT NULL,
    STATUS         CHAR(1) DEFAULT 'N' NOT NULL
);

CREATE TABLE STAFF (
    STAFF_ID    NUMBER(10) PRIMARY KEY,
    FIRST_NAME  VARCHAR2(50) NOT NULL,
    LAST_NAME   VARCHAR2(50) NOT NULL,
    ROLE        VARCHAR2(50) NOT NULL,
    EMAIL       VARCHAR2(100) NOT NULL
);

CREATE TABLE EXPERIMENT (
    EXPERIMENT_ID   NUMBER(10) PRIMARY KEY,
    TITLE           VARCHAR2(200) NOT NULL,
    START_DATE      DATE NOT NULL,
    END_DATE        DATE,
    OBJECTIVE       VARCHAR2(500) NOT NULL
);

CREATE TABLE PLANT (
    PLANT_ID        NUMBER(10) PRIMARY KEY,
    SPACE_ID        NUMBER(10) NOT NULL,
    EXPERIMENT_ID   NUMBER(10) NOT NULL,
    SPECIES         VARCHAR2(100) NOT NULL,
    PLANTED_DATE    DATE NOT NULL,
    HEALTH_STATUS   VARCHAR2(50) NOT NULL,
    NOTES           VARCHAR2(255),
    CONSTRAINT FK_PLANT_SPACE FOREIGN KEY (SPACE_ID) REFERENCES SPACE(SPACE_ID),
    CONSTRAINT FK_PLANT_EXPERIMENT FOREIGN KEY (EXPERIMENT_ID) REFERENCES EXPERIMENT(EXPERIMENT_ID)
);

CREATE TABLE ASSIGNMENT (
    ASSIGNMENT_ID   NUMBER(10) PRIMARY KEY,
    STAFF_ID        NUMBER(10) NOT NULL,
    EXPERIMENT_ID   NUMBER(10) NOT NULL,
    TASK_DESC       VARCHAR2(255) NOT NULL,
    DATE_ASSIGNED   DATE NOT NULL,
    STATUS          VARCHAR2(20) NOT NULL,
    DUE_DATE        DATE,
    CONSTRAINT FK_ASSIGNMENT_STAFF FOREIGN KEY (STAFF_ID) REFERENCES STAFF(STAFF_ID),
    CONSTRAINT FK_ASSIGNMENT_EXPERIMENT FOREIGN KEY (EXPERIMENT_ID) REFERENCES EXPERIMENT(EXPERIMENT_ID)
);

CREATE TABLE INVENTORY (
    INVENTORY_ID    NUMBER(10) PRIMARY KEY,
    EXPERIMENT_ID   NUMBER(10) NOT NULL,
    ITEM_NAME       VARCHAR2(100) NOT NULL,
    QUANTITY        NUMBER(10) NOT NULL,
    COST_PER_UNIT   NUMBER(10,2) NOT NULL,
    LAST_UPDATED    DATE NOT NULL,
    CONSTRAINT FK_INVENTORY_EXPERIMENT FOREIGN KEY (EXPERIMENT_ID) REFERENCES EXPERIMENT(EXPERIMENT_ID)
);

-- ***************************
-- 2) Create Indexes
-- ***************************

CREATE UNIQUE INDEX IDX_STAFF_EMAIL    ON STAFF(EMAIL);
CREATE UNIQUE INDEX IDX_INVENTORY_NAME ON INVENTORY(ITEM_NAME);
CREATE UNIQUE INDEX IDX_SPACE_LOC      ON SPACE(LOCATION_DESC);

CREATE INDEX IDX_PLANT_SPACE           ON PLANT(SPACE_ID);
CREATE INDEX IDX_PLANT_EXPERIMENT      ON PLANT(EXPERIMENT_ID);
CREATE INDEX IDX_ASSIGNMENT_STAFF      ON ASSIGNMENT(STAFF_ID);
CREATE INDEX IDX_ASSIGNMENT_EXPERIMENT ON ASSIGNMENT(EXPERIMENT_ID);
CREATE INDEX IDX_INVENTORY_EXPERIMENT  ON INVENTORY(EXPERIMENT_ID);
CREATE INDEX IDX_PLANT_SPECIES         ON PLANT(SPECIES);
CREATE INDEX IDX_STAFF_LASTNAME        ON STAFF(LAST_NAME);

-- ***************************
-- 3) Create Sequences
-- ***************************

CREATE SEQUENCE SPACE_SEQ      START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE STAFF_SEQ      START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE EXPERIMENT_SEQ START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE PLANT_SEQ      START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE ASSIGNMENT_SEQ START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE INVENTORY_SEQ  START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;

-- ***************************
-- 4) Create Triggers
-- ***************************

CREATE OR REPLACE TRIGGER TRG_SPACE_BI
BEFORE INSERT ON SPACE
FOR EACH ROW
BEGIN
    SELECT SPACE_SEQ.NEXTVAL INTO :NEW.SPACE_ID FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER TRG_STAFF_BI
BEFORE INSERT ON STAFF
FOR EACH ROW
BEGIN
    SELECT STAFF_SEQ.NEXTVAL INTO :NEW.STAFF_ID FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER TRG_EXPERIMENT_BI
BEFORE INSERT ON EXPERIMENT
FOR EACH ROW
BEGIN
    SELECT EXPERIMENT_SEQ.NEXTVAL INTO :NEW.EXPERIMENT_ID FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER TRG_PLANT_BI
BEFORE INSERT ON PLANT
FOR EACH ROW
BEGIN
    SELECT PLANT_SEQ.NEXTVAL INTO :NEW.PLANT_ID FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER TRG_ASSIGNMENT_BI
BEFORE INSERT ON ASSIGNMENT
FOR EACH ROW
BEGIN
    SELECT ASSIGNMENT_SEQ.NEXTVAL INTO :NEW.ASSIGNMENT_ID FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER TRG_INVENTORY_BI
BEFORE INSERT ON INVENTORY
FOR EACH ROW
BEGIN
    SELECT INVENTORY_SEQ.NEXTVAL INTO :NEW.INVENTORY_ID FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER TRG_INVENTORY_AUDIT
BEFORE INSERT OR UPDATE ON INVENTORY
FOR EACH ROW
BEGIN
    :NEW.LAST_UPDATED := SYSDATE;
END;
/

-- ***************************
-- 5) Create Views
-- ***************************

CREATE OR REPLACE VIEW PLANT_INFO AS
SELECT p.PLANT_ID,
       p.SPECIES,
       s.LOCATION_DESC,
       p.HEALTH_STATUS,
       e.TITLE AS EXPERIMENT_TITLE
FROM   PLANT p
JOIN   SPACE s ON p.SPACE_ID = s.SPACE_ID
JOIN   EXPERIMENT e ON p.EXPERIMENT_ID = e.EXPERIMENT_ID;

CREATE OR REPLACE VIEW STAFF_ASSIGNMENT_SUMMARY_VW AS
SELECT s.STAFF_ID,
       s.FIRST_NAME || ' ' || s.LAST_NAME AS STAFF_NAME,
       COUNT(a.ASSIGNMENT_ID) AS TOTAL_ASSIGNMENTS
FROM STAFF s
LEFT JOIN ASSIGNMENT a ON s.STAFF_ID = a.STAFF_ID
GROUP BY s.STAFF_ID, s.FIRST_NAME, s.LAST_NAME;

CREATE OR REPLACE VIEW PLANT_LOCATIONS_VW AS
SELECT p.PLANT_ID,
       p.SPECIES,
       p.HEALTH_STATUS,
       p.EXPERIMENT_ID,
       p.SPACE_ID,
       sp.LOCATION_DESC AS SPACE_LOCATION,
       sp.SPACE_TYPE
FROM PLANT p
JOIN SPACE sp ON p.SPACE_ID = sp.SPACE_ID;

-- ***************************
-- 6) Validation Queries
-- ***************************

SELECT TABLE_NAME FROM USER_TABLES ORDER BY TABLE_NAME;

SELECT OBJECT_NAME, OBJECT_TYPE, STATUS
FROM USER_OBJECTS
WHERE OBJECT_TYPE IN ('INDEX','SEQUENCE','TRIGGER','VIEW')
ORDER BY OBJECT_TYPE, OBJECT_NAME;
